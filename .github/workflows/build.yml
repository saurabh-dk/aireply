name: AWS Prod build
on:
  push:
    branches:
      - master

env:
  CI: false

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [17.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Use Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: x64

      - name: Install Python Virtual ENV
        working-directory: ./backend
        run: pip3 install virtualenv

      - name: Virtual ENV
        uses: actions/cache@v2
        id: cache-venv # name for referring later
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Activate Virtual ENV
        working-directory: ./backend
        run: python -m venv venv && source venv/bin/activate && pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Install dependencies again
        working-directory: ./backend
        run: pip3 install -r requirements.txt

      - name: Create archive of dependencies
        working-directory: ./backend
        run: |
          cd ./venv/lib/python3.9/site-packages
          zip -r9 ../../../../api.zip .

      - name: Add API files to Zip file
        run: |
          ls
          echo "------"
          ls ..
          cd ./backend && zip -g ../api.zip -r .

      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: ./backend/api.zip

      - name: NPM Install
        run: |
          npm install
        working-directory: ./frontend

      - name: Development Build
        run: |
          npm run build
        working-directory: ./frontend

  cd:
    runs-on: ubuntu-latest
    needs: [ci]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    strategy:
      matrix:
        node-version: [17.x]

    steps:
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Download Lambda api.zip
        uses: actions/download-artifact@v2
        with:
          name: api

      - name: Upload to S3
        run: aws s3 cp api.zip s3://aireply-saurabhdk/api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy frontend to S3
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_PROD_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "frontend/build"

      - name: Deploy new Lambda
        run: aws lambda update-function-code --function-name get-ai-reply --s3-bucket aireply-saurabhdk --s3-key api.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
